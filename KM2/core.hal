# core HAL config file for simulation
 loadusr  python ./logic/gasketing.pyc
# first load all the RT modules that will be needed
# kinematics
loadrt [KINS]KINEMATICS
# motion controller, get name and thread periods from ini file
#loadrt [EMCMOT]EMCMOT base_period_nsec=[EMCMOT]BASE_PERIOD servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[KINS]JOINTS
loadrt [EMCMOT]EMCMOT  servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[KINS]JOINTS



# add motion controller functions to servo thread
addf motion-command-handler servo-thread
addf motion-controller servo-thread
# link the differentiator functions into the code

net machine.is-on       halui.machine.is-on 
net estop.is-activated  halui.estop.is-activated
net estop.activate halui.estop.activate
# estop loopback
#net estop-loop iocontrol.0.user-enable-out iocontrol.0.emc-enable-in

# create signals for tool loading loopback
#net tool-prep-loop iocontrol.0.tool-prepare iocontrol.0.tool-prepared
#net tool-change-loop iocontrol.0.tool-change iocontrol.0.tool-changed

#********** estop loopback ***********

#net estop-out <= iocontrol.0.user-enable-out
#net estop-out => iocontrol.0.emc-enable-in

loadrt logic count=2 personality=0x207,0x207
addf logic.0       servo-thread
addf logic.1       servo-thread

#net mixer.Fault      => logic.0.in-00 
#net a.pump.Fault     => logic.0.in-01 //Смотреть в classicladder.hal

#net b.pump.Fault     => logic.0.in-02 
net x.Fault          => logic.0.in-03 
net y1.Fault         => logic.0.in-04 
net y2.Fault         => logic.0.in-05 
net z.Fault          => logic.0.in-06 
net servo-error      => logic.0.or


net servo-error        => logic.1.in-00
net button-estop-not   => logic.1.in-01 
net rele.faza         => logic.1.in-02
#net rele.air           => logic.1.in-03 
net rele.motor         => logic.1.in-04
net ext-estop          => logic.1.or 


loadrt not count=8
addf not.0 servo-thread
addf not.1 servo-thread
addf not.2 servo-thread
addf not.3 servo-thread
addf not.4 servo-thread
addf not.5 servo-thread
addf not.6 servo-thread
addf not.7 servo-thread


# estop signals
# signal is the internal or gui estop command from EMC
net gui-estop iocontrol.0.user-enable-out
# one-shot on  timer when signal above goes high.
net estop-strobe iocontrol.0.user-request-enable 

# This bit signal is comand to estop from CL to EMC
net estop-out iocontrol.0.emc-enable-in 

loadusr -W hal_manualtoolchange
net tool-change iocontrol.0.tool-change => hal_manualtoolchange.change
net tool-changed iocontrol.0.tool-changed <= hal_manualtoolchange.changed
net tool-number iocontrol.0.tool-prep-number => hal_manualtoolchange.number
net tool-prepare-loopback iocontrol.0.tool-prepare => iocontrol.0.tool-prepared
